/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: chelC (https://sketchfab.com/chelC)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/log-cabin-f4540e14dd8d447d958336e184ffcf8f
Title: Log Cabin
*/

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { a } from "@react-spring/three";

import logCabin from "../assets/3d/log_cabin.glb";

const LogCabin = ({ isRotating, setIsRotating, setCurrentStage, ...props }) => {
  const logCabinRef = useRef();

  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(logCabin);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;

    lastX.current = clientX;
  };

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;

      const delta = (clientX - lastX.current) / viewport.width;

      logCabinRef.current.rotation.y += delta * 0.01 * Math.PI;
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);
      logCabinRef.current.rotation.y += 0.01 * Math.PI;
      rotationSpeed.current = 0.0125;
    } else if (e.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);
      logCabinRef.current.rotation.y -= 0.01 * Math.PI;
      rotationSpeed.current = -0.0125;
    }
  };

  const handleKeyUp = (e) => {
    if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      logCabinRef.current.rotation.y += rotationSpeed.current;
    } else {
      const rotation = logCabinRef.current.rotation.y;

      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    document.addEventListener("keyup", handleKeyUp);
    document.addEventListener("keydown", handleKeyDown);

    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      document.removeEventListener("keyup", handleKeyUp);
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, [gl, handlePointerDown, handlePointerMove, handlePointerUp]);

  return (
    <a.group {...props} ref={logCabinRef}>
      <a.group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          geometry={nodes.Object_2.geometry}
          material={materials.lambert17SG}
        />
        <mesh
          geometry={nodes.Object_3.geometry}
          material={materials.lambert31SG}
        />
        <mesh
          geometry={nodes.Object_4.geometry}
          material={materials.initialShadingGroup}
        />
        <mesh
          geometry={nodes.Object_5.geometry}
          material={materials.lambert10SG}
        />
        <mesh
          geometry={nodes.Object_6.geometry}
          material={materials.lambert11SG}
        />
        <mesh
          geometry={nodes.Object_7.geometry}
          material={materials.lambert14SG}
        />
        <mesh
          geometry={nodes.Object_8.geometry}
          material={materials.lambert14SG}
        />
        <mesh
          geometry={nodes.Object_9.geometry}
          material={materials.lambert16SG}
        />
        <mesh
          geometry={nodes.Object_10.geometry}
          material={materials.lambert18SG}
        />
        <mesh
          geometry={nodes.Object_11.geometry}
          material={materials.lambert19SG}
        />
        <mesh
          geometry={nodes.Object_12.geometry}
          material={materials.lambert23SG}
        />
        <mesh
          geometry={nodes.Object_13.geometry}
          material={materials.lambert25SG}
        />
        <mesh
          geometry={nodes.Object_14.geometry}
          material={materials.lambert26SG}
        />
        <mesh
          geometry={nodes.Object_15.geometry}
          material={materials.lambert27SG}
        />
        <mesh
          geometry={nodes.Object_16.geometry}
          material={materials.lambert28SG}
        />
        <mesh
          geometry={nodes.Object_17.geometry}
          material={materials.lambert29SG}
        />
        <mesh
          geometry={nodes.Object_18.geometry}
          material={materials.lambert8SG}
        />
        <mesh
          geometry={nodes.Object_19.geometry}
          material={materials.lambert9SG}
        />
        <mesh
          geometry={nodes.Object_20.geometry}
          material={materials.log_texturedsm_log_base4_lambert4SG}
        />
        <mesh
          geometry={nodes.Object_21.geometry}
          material={materials.log_texturedsm_log_base4_lambert4SG}
        />
      </a.group>
    </a.group>
  );
};

// useGLTF.preload("/log_cabin.glb");

export default LogCabin;
